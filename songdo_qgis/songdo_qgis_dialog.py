# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SongdoQGISDialog
                                 A QGIS plugin
 Songdo QGIS Linker
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-07-16
        git sha              : $Format:%H$
        copyright            : (C) 2024 by sbyim
        email                : ysb06@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from typing import Dict

from qgis.PyQt import QtWidgets
from .songdo_qgis_dialog_base import Ui_SongdoQGISDialogBase
from qgis.core import QgsProject, QgsVectorLayer

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
# from qgis.PyQt import uic
# FORM_CLASS, _ = uic.loadUiType(os.path.join(
#     os.path.dirname(__file__), 'songdo_qgis_dialog_base.ui'))


class SongdoQGISDialog(Ui_SongdoQGISDialogBase, QtWidgets.QDialog):
    def __init__(
        self,
        parent=None,
        group_name="SongdoQGIS",
        node_key: str = "node_layer",
        link_key: str = "link_layer",
        path_key: str = "path_layer",
    ):
        super(SongdoQGISDialog, self).__init__(parent)
        self.setupUi(self)
        project = QgsProject.instance()
        self.layers: Dict[str, QgsVectorLayer] = {
            key: value
            for key, value in project.mapLayers().items()
            if type(value) == QgsVectorLayer
        }
        self.nodeSelector.addItem("Select Node Layer...", None)
        self.outputSelector.addItem("Select Link Layer...", None)
        self.pathSelector.addItem("Select Path Layer...", None)

        for key, value in self.layers.items():
            self.nodeSelector.addItem(value.name(), key)
            self.outputSelector.addItem(value.name(), key)
            self.pathSelector.addItem(value.name(), key)

        node_value = project.readEntry(group_name, node_key)
        if node_value[1]:
            idx = self.nodeSelector.findData(node_value[0])
            if idx != -1:
                self.nodeSelector.setCurrentIndex(idx)
        link_value = project.readEntry(group_name, link_key)
        if link_value[1]:
            idx = self.outputSelector.findData(link_value[0])
            if idx != -1:
                self.outputSelector.setCurrentIndex(idx)
        path_value = project.readEntry(group_name, path_key)
        if path_value[1]:
            idx = self.pathSelector.findData(path_value[0])
            if idx != -1:
                self.pathSelector.setCurrentIndex(idx)
